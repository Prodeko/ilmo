"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type AppLanguage {
  defaultLanguage: String
  supportedLanguages: [String]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `claimRegistrationToken` mutation."""
input ClaimRegistrationTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
  quotaId: UUID!
}

type ClaimRegistrationTokenOutput {
  registrationToken: String
  updateToken: String
}

"""The output of our `claimRegistrationToken` mutation."""
type ClaimRegistrationTokenPayload {
  claimRegistrationTokenOutput: ClaimRegistrationTokenOutput

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the create `EventCategory` mutation."""
input CreateEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventCategory` to be created by this mutation."""
  eventCategory: EventCategoryInput!
}

"""The output of our create `EventCategory` mutation."""
type CreateEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventCategory` that was created by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """Reads a single `Organization` that is related to this `EventCategory`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventCategory`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventCategory`."""
  userByUpdatedBy: User
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """Reads a single `EventCategory` that is related to this `Event`."""
  category: EventCategory

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Event`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Event`."""
  userByUpdatedBy: User
}

"""All input for the create `EventQuestion` mutation."""
input CreateEventQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventQuestion` to be created by this mutation."""
  eventQuestion: EventQuestionInput!
}

"""The output of our create `EventQuestion` mutation."""
type CreateEventQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventQuestion`."""
  event: Event

  """The `EventQuestion` that was created by this mutation."""
  eventQuestion: EventQuestion

  """An edge for our `EventQuestion`. May be used by Relay 1."""
  eventQuestionEdge(
    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByUpdatedBy: User
}

"""An input for mutations affecting `CreateEventQuota`"""
input CreateEventQuotaInput {
  position: Int
  size: Int
  title: JSON
}

"""All input for the `createEventQuotas` mutation."""
input CreateEventQuotasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
  quotas: [CreateEventQuotaInput]!
}

"""The output of our `createEventQuotas` mutation."""
type CreateEventQuotasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  quotas: [Quota]
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createRegistration` mutation."""
input CreateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  eventId: UUID!
  firstName: String!
  lastName: String!
  quotaId: UUID!
  registrationToken: String!
}

"""The output of our `createRegistration` mutation."""
type CreateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Quota` that is related to this `Registration`."""
  quota: Quota
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteEventCategory` mutation."""
input DeleteEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the event category."""
  id: UUID!
}

"""The output of our delete `EventCategory` mutation."""
type DeleteEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventCategoryNodeId: ID

  """The `EventCategory` that was deleted by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """Reads a single `Organization` that is related to this `EventCategory`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventCategory`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventCategory`."""
  userByUpdatedBy: User
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the event."""
  id: UUID!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """Reads a single `EventCategory` that is related to this `Event`."""
  category: EventCategory

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventNodeId: ID

  """The `Event` that was deleted by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Event`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Event`."""
  userByUpdatedBy: User
}

"""All input for the `deleteEventQuestion` mutation."""
input DeleteEventQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `EventQuestion` mutation."""
type DeleteEventQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventQuestionNodeId: ID

  """Reads a single `Event` that is related to this `EventQuestion`."""
  event: Event

  """The `EventQuestion` that was deleted by this mutation."""
  eventQuestion: EventQuestion

  """An edge for our `EventQuestion`. May be used by Relay 1."""
  eventQuestionEdge(
    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByUpdatedBy: User
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRegistration` mutation."""
input DeleteRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  updateToken: String!
}

"""The output of our `deleteRegistration` mutation."""
type DeleteRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

input EmailTemplateVariables {
  actionDescription: String
  deleteAccountLink: String
  eventName: TranslatedInputField
  eventRegistrationUpdateLink: String
  eventSlug: String
  eventTime: String
  link: String
  organizationName: String
  registrationName: String
  registrationQuota: TranslatedInputField
  token: String
  url: String
  verifyLink: String
}

"""The output of our `renderEmailTemplates` query."""
type EmailTemplatesConnection {
  templates: [RenderEmailPayload!]!
}

"""Main table for events."""
type Event {
  """Reads a single `EventCategory` that is related to this `Event`."""
  category: EventCategory

  """Id of the event category."""
  categoryId: UUID!
  createdAt: Datetime!
  createdBy: UUID

  """Description of the event."""
  description: JSON!

  """Ending time of the event."""
  eventEndTime: Datetime!

  """Reads and enables pagination through a set of `EventQuestion`."""
  eventQuestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventQuestionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsConnection!

  """Starting time of the event."""
  eventStartTime: Datetime!

  """Header image for the event"""
  headerImageFile: String

  """Unique identifier for the event."""
  id: UUID!

  """A draft event that is not publicly visible."""
  isDraft: Boolean!

  """A highlighted event."""
  isHighlighted: Boolean!

  """Name of the event."""
  name: JSON!

  """Reads a single `Organization` that is related to this `Event`."""
  ownerOrganization: Organization

  """Id of the organizer."""
  ownerOrganizationId: UUID!

  """Reads and enables pagination through a set of `Quota`."""
  quotas(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuotaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuotaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Quota`."""
    orderBy: [QuotasOrderBy!] = [PRIMARY_KEY_ASC]
  ): QuotasConnection!

  """Time of event registration end."""
  registrationEndTime: Datetime!

  """Time of event registration open."""
  registrationStartTime: Datetime!

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsConnection!

  """Designates whether event signup is closed or not."""
  signupClosed: Boolean

  """Designates whether event signup is open or not."""
  signupOpen: Boolean

  """Designates whether event signup is upcoming or not."""
  signupUpcoming: Boolean

  """Slug for the event."""
  slug: String!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Event`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Event`."""
  userByUpdatedBy: User
}

"""A connection to a list of `EventCategory` values."""
type EventCategoriesConnection {
  """
  A list of edges which contains the `EventCategory` and cursor to aid in pagination.
  """
  edges: [EventCategoriesEdge!]!

  """A list of `EventCategory` objects."""
  nodes: [EventCategory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `EventCategory` edge in the connection."""
type EventCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventCategory` at the end of the edge."""
  node: EventCategory!
}

"""Methods to use when ordering `EventCategory`."""
enum EventCategoriesOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  OWNER_ORGANIZATION_ID_ASC
  OWNER_ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table for event categories."""
type EventCategory {
  createdAt: Datetime!
  createdBy: UUID

  """Short description of the event category."""
  description: JSON!

  """Reads and enables pagination through a set of `Event`."""
  eventsByCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!

  """Unique identifier for the event category."""
  id: UUID!

  """Name of the event category."""
  name: JSON!

  """Reads a single `Organization` that is related to this `EventCategory`."""
  ownerOrganization: Organization

  """Identifier of the organizer."""
  ownerOrganizationId: UUID!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `EventCategory`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventCategory`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `EventCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventCategoryCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: JSON

  """Checks for equality with the object’s `ownerOrganizationId` field."""
  ownerOrganizationId: UUID

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `EventCategory` object types. All fields are combined with a logical ‘and.’
"""
input EventCategoryFilter {
  """Checks for all expressions in this list."""
  and: [EventCategoryFilter!]

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: JSONFilter

  """Negates the expression."""
  not: EventCategoryFilter

  """Checks for any expressions in this list."""
  or: [EventCategoryFilter!]

  """Filter by the object’s `ownerOrganizationId` field."""
  ownerOrganizationId: UUIDFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""An input for mutations affecting `EventCategory`"""
input EventCategoryInput {
  """Short description of the event category."""
  description: JSON!

  """Name of the event category."""
  name: JSON!

  """Identifier of the organizer."""
  ownerOrganizationId: UUID!
}

"""
Represents an update to a `EventCategory`. Fields that are set will be updated.
"""
input EventCategoryPatch {
  """Short description of the event category."""
  description: JSON

  """Name of the event category."""
  name: JSON

  """Identifier of the organizer."""
  ownerOrganizationId: UUID
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `eventEndTime` field."""
  eventEndTime: Datetime

  """Checks for equality with the object’s `eventStartTime` field."""
  eventStartTime: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isDraft` field."""
  isDraft: Boolean

  """Checks for equality with the object’s `ownerOrganizationId` field."""
  ownerOrganizationId: UUID

  """Checks for equality with the object’s `registrationEndTime` field."""
  registrationEndTime: Datetime

  """Checks for equality with the object’s `registrationStartTime` field."""
  registrationStartTime: Datetime

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Checks for all expressions in this list."""
  and: [EventFilter!]

  """Filter by the object’s `categoryId` field."""
  categoryId: UUIDFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `eventEndTime` field."""
  eventEndTime: DatetimeFilter

  """Filter by the object’s `eventStartTime` field."""
  eventStartTime: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isDraft` field."""
  isDraft: BooleanFilter

  """Negates the expression."""
  not: EventFilter

  """Checks for any expressions in this list."""
  or: [EventFilter!]

  """Filter by the object’s `ownerOrganizationId` field."""
  ownerOrganizationId: UUIDFilter

  """Filter by the object’s `registrationEndTime` field."""
  registrationEndTime: DatetimeFilter

  """Filter by the object’s `registrationStartTime` field."""
  registrationStartTime: DatetimeFilter

  """Filter by the object’s `signupClosed` field."""
  signupClosed: BooleanFilter

  """Filter by the object’s `signupOpen` field."""
  signupOpen: BooleanFilter

  """Filter by the object’s `signupUpcoming` field."""
  signupUpcoming: BooleanFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""An input for mutations affecting `Event`"""
input EventInput {
  """Id of the event category."""
  categoryId: UUID!

  """Description of the event."""
  description: JSON!

  """Ending time of the event."""
  eventEndTime: Datetime!

  """Starting time of the event."""
  eventStartTime: Datetime!

  """Header image for the event"""
  headerImageFile: Upload

  """A draft event that is not publicly visible."""
  isDraft: Boolean

  """A highlighted event."""
  isHighlighted: Boolean

  """Name of the event."""
  name: JSON!

  """Id of the organizer."""
  ownerOrganizationId: UUID!

  """Time of event registration end."""
  registrationEndTime: Datetime!

  """Time of event registration open."""
  registrationStartTime: Datetime!

  """Slug for the event."""
  slug: String!
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  """Id of the event category."""
  categoryId: UUID

  """Description of the event."""
  description: JSON

  """Ending time of the event."""
  eventEndTime: Datetime

  """Starting time of the event."""
  eventStartTime: Datetime

  """Header image for the event"""
  headerImageFile: Upload

  """A draft event that is not publicly visible."""
  isDraft: Boolean

  """A highlighted event."""
  isHighlighted: Boolean

  """Name of the event."""
  name: JSON

  """Id of the organizer."""
  ownerOrganizationId: UUID

  """Time of event registration end."""
  registrationEndTime: Datetime

  """Time of event registration open."""
  registrationStartTime: Datetime

  """Slug for the event."""
  slug: String
}

type EventQuestion {
  createdAt: Datetime!
  createdBy: UUID

  """Reads a single `Event` that is related to this `EventQuestion`."""
  event: Event
  eventId: UUID!
  id: UUID!
  options: JSON
  type: QuestionType!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `EventQuestion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventQuestionCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `EventQuestion` object types. All fields are combined with a logical ‘and.’
"""
input EventQuestionFilter {
  """Checks for all expressions in this list."""
  and: [EventQuestionFilter!]

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: EventQuestionFilter

  """Checks for any expressions in this list."""
  or: [EventQuestionFilter!]

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""An input for mutations affecting `EventQuestion`"""
input EventQuestionInput {
  eventId: UUID!
  options: JSON
  type: QuestionType!
}

"""
Represents an update to a `EventQuestion`. Fields that are set will be updated.
"""
input EventQuestionPatch {
  eventId: UUID
  options: JSON
  type: QuestionType
}

"""A connection to a list of `EventQuestion` values."""
type EventQuestionsConnection {
  """
  A list of edges which contains the `EventQuestion` and cursor to aid in pagination.
  """
  edges: [EventQuestionsEdge!]!

  """A list of `EventQuestion` objects."""
  nodes: [EventQuestion!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventQuestion` you could get from the connection."""
  totalCount: Int!
}

"""A `EventQuestion` edge in the connection."""
type EventQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventQuestion` at the end of the edge."""
  node: EventQuestion!
}

"""Methods to use when ordering `EventQuestion`."""
enum EventQuestionsOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

type EventRegistrationsSubscriptionPayload {
  event: String
  registrations(after: Datetime!): [Registration]
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EVENT_END_TIME_ASC
  EVENT_END_TIME_DESC
  EVENT_START_TIME_ASC
  EVENT_START_TIME_DESC
  ID_ASC
  ID_DESC
  IS_DRAFT_ASC
  IS_DRAFT_DESC
  NATURAL
  OWNER_ORGANIZATION_ID_ASC
  OWNER_ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_END_TIME_ASC
  REGISTRATION_END_TIME_DESC
  REGISTRATION_START_TIME_ASC
  REGISTRATION_START_TIME_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID!
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  If someone invited you by your email address then you must include the code that was emailed to you, otherwise you may accept the invitation directly using the UUID. If successful, you will be a member of the organization.
  """
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  Generates a registration token that must be provided during registration. The token is used to prevent F5-wars.
  """
  claimRegistrationToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ClaimRegistrationTokenInput!
  ): ClaimRegistrationTokenPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `EventCategory`."""
  createEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventCategoryInput!
  ): CreateEventCategoryPayload

  """Creates a single `EventQuestion`."""
  createEventQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventQuestionInput!
  ): CreateEventQuestionPayload

  """Create multiple quotas at once."""
  createEventQuotas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventQuotasInput!
  ): CreateEventQuotasPayload

  """
  An `Organization` is a great way of sharing access to resources between multiple users without compromising security. When you create an organization you will have the 'owner' role. You may invite other users and redistribute roles.
  """
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """
  Register to an event. Checks that a valid registration token was suplied.
  """
  createRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRegistrationInput!
  ): CreateRegistrationPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `EventCategory` using a unique key."""
  deleteEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventCategoryInput!
  ): DeleteEventCategoryPayload

  """Deletes a single `EventQuestion` using a unique key."""
  deleteEventQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventQuestionInput!
  ): DeleteEventQuestionPayload

  """
  Only the 'owner' may delete an organization. This operation cannot be undone, so be sure that it is what you intend.
  """
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Delete event registration."""
  deleteRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegistrationInput!
  ): DeleteRegistrationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  You may invite a user to your organization either by their username (only for verified users) or by their email. If you opt to invite by email then an email will be sent to this person containing a code that they need to accept the invitation. If the person doesn't already have an account they will be instructed to create one; their account need not have the email address that you invited listed as the secret code is confirmation enough.
  """
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  The owner of an `Organization` may remove an `OrganizationMember` with this mutation.
  """
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """
  The owner of an `Organization` may use this mutation to transfer ownership to a different organization member. Take care, if you assign ownership to someone who cannot or will not access their account then you may need to contact support to have ownership reassigned.
  """
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `EventCategory` using a unique key and a patch."""
  updateEventCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventCategoryInput!
  ): UpdateEventCategoryPayload

  """Updates a single `EventQuestion` using a unique key and a patch."""
  updateEventQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventQuestionInput!
  ): UpdateEventQuestionPayload

  """Update multiple quotas at once."""
  updateEventQuotas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventQuotasInput!
  ): UpdateEventQuotasPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Update event registration. Checks that a valid update token was suplied.
  """
  updateRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegistrationInput!
  ): UpdateRegistrationPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

type Organization {
  createdAt: Datetime!
  currentUserIsOwner: Boolean

  """Reads and enables pagination through a set of `EventCategory`."""
  eventCategoriesByOwnerOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesConnection!

  """Reads and enables pagination through a set of `Event`."""
  eventsByOwnerOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!
  id: UUID!
  name: String!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  slug: String!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: OrganizationFilter

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Filter by the object’s `slug` field."""
  slug: StringFilter
}

type OrganizationMembership {
  createdAt: Datetime!
  id: UUID!
  isOwner: Boolean!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: OrganizationMembershipFilter

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  ID_ASC
  ID_DESC
  MEMBER_NAME_ASC
  MEMBER_NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  name: String
  slug: String
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  """The currently logged in user (or null if not logged in)."""
  currentUser: User
  currentUserIsAdmin: Boolean
  currentUserIsOwnerOrganizationMember(ownerOrganizationId: UUID!): Boolean
  event(id: UUID!): Event
  eventBySlug(slug: String!): Event

  """Reads and enables pagination through a set of `EventCategory`."""
  eventCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesConnection
  eventCategory(id: UUID!): EventCategory
  eventQuestion(id: UUID!): EventQuestion

  """Reads and enables pagination through a set of `EventQuestion`."""
  eventQuestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventQuestionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsConnection

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection
  languages: AppLanguage
  organization(id: UUID!): Organization
  organizationBySlug(slug: String!): Organization

  """
  Given an invitation UUID (and, if required, the code that was emailed to you), retrieves the `Organization` that you were invited to.
  """
  organizationForInvitation(code: String, invitationId: UUID!): Organization
  organizationMembership(id: UUID!): OrganizationMembership

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection
  quota(id: UUID!): Quota

  """Reads and enables pagination through a set of `Quota`."""
  quotas(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuotaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuotaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Quota`."""
    orderBy: [QuotasOrderBy!] = [PRIMARY_KEY_ASC]
  ): QuotasConnection
  registration(id: UUID!): Registration

  """Get registration by update token."""
  registrationByUpdateToken(updateToken: String!): Registration

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsConnection

  """Use this query to render server-side mjml templates to html and text."""
  renderEmailTemplate(input: RenderEmailInput!): RenderEmailPayload

  """
  Use this query to render all server-side email templates to html and text.
  """
  renderEmailTemplates: EmailTemplatesConnection
  user(id: UUID!): User
  userAuthentication(id: UUID!): UserAuthentication
  userByUsername(username: String!): User
  userEmail(id: UUID!): UserEmail
}

enum QuestionType {
  LONG_TEXT
  OPTION
  SHORT_TEXT
}

"""Main table for registration quotas."""
type Quota {
  createdAt: Datetime!
  createdBy: UUID

  """Reads a single `Event` that is related to this `Quota`."""
  event: Event

  """Identifier of the event that this quota is for."""
  eventId: UUID!
  id: UUID!

  """Quota position. Used to order quotas."""
  position: Int!

  """Private questions related to the quota."""
  questionsPrivate: JSON

  """Public questions related to the quota."""
  questionsPublic: JSON

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsConnection!

  """Size of the quota."""
  size: Int!

  """Title for the quota."""
  title: JSON!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Quota`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Quota`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `Quota` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input QuotaCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `position` field."""
  position: Int

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `Quota` object types. All fields are combined with a logical ‘and.’
"""
input QuotaFilter {
  """Checks for all expressions in this list."""
  and: [QuotaFilter!]

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: QuotaFilter

  """Checks for any expressions in this list."""
  or: [QuotaFilter!]

  """Filter by the object’s `position` field."""
  position: IntFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""A connection to a list of `Quota` values."""
type QuotasConnection {
  """
  A list of edges which contains the `Quota` and cursor to aid in pagination.
  """
  edges: [QuotasEdge!]!

  """A list of `Quota` objects."""
  nodes: [Quota!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Quota` you could get from the connection."""
  totalCount: Int!
}

"""A `Quota` edge in the connection."""
type QuotasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Quota` at the end of the edge."""
  node: Quota!
}

"""Methods to use when ordering `Quota`."""
enum QuotasOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

input RegisterInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""Main table for registrations."""
type Registration {
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """Identifier of a related event."""
  eventId: UUID!

  """First name of the person registering to an event."""
  firstName: String

  """Returns the full name of a registered person."""
  fullName: String

  """Unique identifier for the registration."""
  id: UUID!

  """Designates whether the registration is queued for a quota or not."""
  isQueued: Boolean

  """Last name of the person registering to an event."""
  lastName: String

  """Reads a single `Quota` that is related to this `Registration`."""
  quota: Quota

  """Identifier of a related quota."""
  quotaId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Registration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RegistrationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `quotaId` field."""
  quotaId: UUID
}

"""
A filter to be used against `Registration` object types. All fields are combined with a logical ‘and.’
"""
input RegistrationFilter {
  """Checks for all expressions in this list."""
  and: [RegistrationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isQueued` field."""
  isQueued: BooleanFilter

  """Negates the expression."""
  not: RegistrationFilter

  """Checks for any expressions in this list."""
  or: [RegistrationFilter!]

  """Filter by the object’s `quotaId` field."""
  quotaId: UUIDFilter
}

"""A connection to a list of `Registration` values."""
type RegistrationsConnection {
  """
  A list of edges which contains the `Registration` and cursor to aid in pagination.
  """
  edges: [RegistrationsEdge!]!

  """A list of `Registration` objects."""
  nodes: [Registration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Registration` you could get from the connection."""
  totalCount: Int!
}

"""A `Registration` edge in the connection."""
type RegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Registration` at the end of the edge."""
  node: Registration!
}

"""Methods to use when ordering `Registration`."""
enum RegistrationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  QUOTA_ID_ASC
  QUOTA_ID_DESC
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `renderEmail` mutation."""
input RenderEmailInput {
  template: String!
  variables: EmailTemplateVariables
}

"""The output of our `renderEmailTemplate` query."""
type RenderEmailPayload {
  html: String
  name: String
  text: String
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when the logged in user's record is updated in some way."""
  currentUserUpdated: UserSubscriptionPayload

  """
  Triggered when new event registrations are created. Each event has its own subscription topic.
  """
  eventRegistrations(eventId: UUID!): EventRegistrationsSubscriptionPayload
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input type for translated fields."""
input TranslatedInputField {
  en: String
  fi: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateEventCategory` mutation."""
input UpdateEventCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the event category."""
  id: UUID!

  """
  An object where the defined keys will be set on the `EventCategory` being updated.
  """
  patch: EventCategoryPatch!
}

"""The output of our update `EventCategory` mutation."""
type UpdateEventCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventCategory` that was updated by this mutation."""
  eventCategory: EventCategory

  """An edge for our `EventCategory`. May be used by Relay 1."""
  eventCategoryEdge(
    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesEdge

  """Reads a single `Organization` that is related to this `EventCategory`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventCategory`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventCategory`."""
  userByUpdatedBy: User
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the event."""
  id: UUID!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """Reads a single `EventCategory` that is related to this `Event`."""
  category: EventCategory

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  ownerOrganization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Event`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Event`."""
  userByUpdatedBy: User
}

"""All input for the `updateEventQuestion` mutation."""
input UpdateEventQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `EventQuestion` being updated.
  """
  patch: EventQuestionPatch!
}

"""The output of our update `EventQuestion` mutation."""
type UpdateEventQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventQuestion`."""
  event: Event

  """The `EventQuestion` that was updated by this mutation."""
  eventQuestion: EventQuestion

  """An edge for our `EventQuestion`. May be used by Relay 1."""
  eventQuestionEdge(
    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `EventQuestion`."""
  userByUpdatedBy: User
}

"""An input for mutations affecting `UpdateEventQuota`"""
input UpdateEventQuotaInput {
  id: UUID
  position: Int
  size: Int
  title: JSON
}

"""All input for the `updateEventQuotas` mutation."""
input UpdateEventQuotasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
  quotas: [UpdateEventQuotaInput]!
}

"""The output of our `updateEventQuotas` mutation."""
type UpdateEventQuotasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  quotas: [Quota]
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRegistration` mutation."""
input UpdateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
  updateToken: String!
}

"""The output of our `updateRegistration` mutation."""
type UpdateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Quota` that is related to this `Registration`."""
  quota: Quota
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""A user who can log in to the application."""
type User {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime!

  """Reads and enables pagination through a set of `EventCategory`."""
  eventCategoriesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesConnection!

  """Reads and enables pagination through a set of `EventCategory`."""
  eventCategoriesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventCategory`."""
    orderBy: [EventCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventCategoriesConnection!

  """Reads and enables pagination through a set of `EventQuestion`."""
  eventQuestionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventQuestionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsConnection!

  """Reads and enables pagination through a set of `EventQuestion`."""
  eventQuestionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventQuestionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventQuestion`."""
    orderBy: [EventQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventQuestionsConnection!

  """Reads and enables pagination through a set of `Event`."""
  eventsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!

  """Reads and enables pagination through a set of `Event`."""
  eventsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Users primary email."""
  primaryEmail: String

  """Reads and enables pagination through a set of `Quota`."""
  quotasByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuotaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuotaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Quota`."""
    orderBy: [QuotasOrderBy!] = [PRIMARY_KEY_ASC]
  ): QuotasConnection!

  """Reads and enables pagination through a set of `Quota`."""
  quotasByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuotaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuotaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Quota`."""
    orderBy: [QuotasOrderBy!] = [PRIMARY_KEY_ASC]
  ): QuotasConnection!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]
  ): [UserAuthentication!]!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication {
  createdAt: Datetime!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: UserAuthenticationFilter

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Information about a user's email address."""
type UserEmail {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Negates the expression."""
  not: UserEmailFilter

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Public-facing username (or 'handle') of the user."""
  username: String
}

type UserSubscriptionPayload {
  event: String
  user: User
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}
