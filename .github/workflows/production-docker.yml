name: production.Dockerfile CI

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    services:
      redis:
        image: redis
        container_name: ilmo_redis
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:11
        container_name: ilmo_db
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - "0.0.0.0:5432:5432"
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # TODO: we should be able to get rid of Node here
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pg_dump
        run: |
          sudo bash -c "echo deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main >> /etc/apt/sources.list.d/pgdg.list"
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -yqq install postgresql-client-11

      - name: setup database
        run: |
          cp .env.ci .env
          yarn --frozen-lockfile
          CONFIRM_DROP=1 yarn setup
        env:
          CI: true

      - name: "Run docker server build"
        run:
          docker build --file production.Dockerfile --build-arg ROOT_URL="http://ilmo3.prodeko.org:5678" --build-arg
          TARGET="server" --tag ilmo-server .

      - name: "Run docker worker build"
        run:
          docker build --file production.Dockerfile --build-arg ROOT_URL="http://ilmo3.prodeko.org:5678" --build-arg
          TARGET="worker" --tag ilmo-worker .

      - name: "Start docker server"
        run:
          docker run --rm -d --init -p 5678:5678 --env-file .env -e NODE_ENV=production -e DATABASE_HOST=ilmo_db -e
          REDIS_URL=redis://ilmo_redis:6379 --name ilmo-server ilmo-server

      - name: "Start docker worker"
        run:
          docker run --rm -d --init --env-file .env -e NODE_ENV=production -e DATABASE_HOST=ilmo_db -e
          REDIS_URL=redis://ilmo_redis:6379 --name ilmo-worker ilmo-worker

      - name: "Test docker"
        run: node .github/workflows/test-docker.js

      - name: "Tear down docker"
        run: docker kill ilmo-server ilmo-worker

      - name: Docker login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Tag and push images to ACR
        run: |
          docker image tag ilmo-server ${{ secrets.REGISTRY_LOGIN_SERVER }}/ilmo/ilmo-server
          docker image tag ilmo-worker ${{ secrets.REGISTRY_LOGIN_SERVER }}/ilmo/ilmo-worker
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ilmo/ilmo-server
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ilmo/ilmo-worker

      - name: Deploy project
        uses: ./.github/workflows/deploy

      - name: Upload release to Sentry
        uses: getsentry/action-release@v1
        env:
          SENTRY_URL: https://sentry.prodeko.org/
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: prodeko
          SENTRY_PROJECT: ilmo
        with:
          environment: production
