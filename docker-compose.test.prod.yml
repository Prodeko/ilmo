# Docker-compose file to debug production build issues.
# Build containers first:
#
# $Â docker build --file docker/dockerfiles/Dockerfile.prod --build-arg ROOT_URL="http://localhost:5678" --target server --tag ilmo-server .
# $ docker build --file docker/dockerfiles/Dockerfile.prod --build-arg ROOT_URL="http://localhost:5678" --target worker --tag ilmo-worker .
#
# Then run this compose stack with server entrypoint 'yarn db migrate'
# Then run this compose stack with server entrypoint 'yarn server start'
#
# The compose stack can be run with 'docker-compose -f docker-compose.test.prod.yml up'

version: "3.8"
services:
  server:
    image: ilmo-server
    container_name: ilmo_server
    # When starting the server for the first time change the
    # entrypoint to 'yarn db migrate' manually. TODO: Figure out a better
    # way to run migrations on initial deployment.
    entrypoint: yarn server start
    ports:
      - "5678:5678"
    env_file:
      - .env.production
    depends_on:
      - redis
      - db

  worker:
    image: ilmo-worker
    entrypoint: yarn worker start
    container_name: ilmo_worker
    env_file:
      - .env.production
    depends_on:
      - redis
      - server

  redis:
    image: redis:6-alpine
    container_name: ilmo_redis
    volumes:
      - ilmo-redis:/data

  db:
    image: debezium/postgres:11
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    env_file:
      - .env.production
    working_dir: /
    volumes:
      - ilmo-postgres:/var/lib/postgresql/data
      - ./docker/dockerfiles/scripts:/docker-entrypoint-initdb.d/
      - ./data:/data
    restart: unless-stopped
    command:
      postgres -c logging_collector=on -c log_destination=stderr -c log_directory=/var/lib/postgresql/data/logs -c
      log_rotation_age=60 -c log_truncate_on_rotation=on -c log_filename=server_log.hour.%H%M

volumes:
  ilmo-redis:
  ilmo-postgres:
